contains = {lst:[], item} => (lst \> (false, (item == @ | $), true)),
unique_add = {lst:[], (contains(lst, item))} => (lst),
unique_add = {lst:[], item} => (lst + item),
unique = {lst:[]} => (lst \> ([], (unique_add($,@)))),
is_whole = {n:#} => (floor(n) == n),
sum = {lst:[]} => (lst \> (0, ($ + @))),
min = {a:#, (a<=b):#} => (a),
min = {_:#, b: #} => (b),
min = {(len(lst) > 0):[]} => (lst \> ((get(lst,0)), (?((@ < $), @, $)))),
max = {a:#, (a >= b):#} => (a),
max = {_:#, b:#} => (b),
max = {(len(lst) > 0):[]} => (lst \> ((get(lst,0)), (?((@ > $), @, $)))),
slice = {lst:[], from:#} => (lst ~> (# >= from)),
in_range = {target:#, (lower <= target):#, (target < higher):#} => true,
in_range = {_:#, _:#, _: #} => false,
slice = {lst:[], from:#, to:#} => (lst ~> (in_range(#, from, to))),
head = {(len(lst) > 0):[]} => (get(lst,0)),
tail = {lst:[]} => (slice(lst,1)),
set = {(unique(entries)):[]},
add = {s:set, item} => (new(set, s + item)),
halve = {lst:[]} => ([(slice(lst,0,floor(len(lst) / 2))), (slice(lst, floor(len(lst) / 2 )))]),
merge = {_:fn, [], l2:[]} => (l2),
merge = {_:fn, l1:[], []} => (l1),
merge = {compare:fn, l1:[], ((compare(get(l1,0),get(l2,0))) < 0):[]} => ((get(l1,0)) + (merge(compare,tail(l1),l2))),
merge = {compare:fn, l1:[], l2:[]} => ((get(l2,0)) + (merge(compare, l1, tail(l2)))),
sort = {(len(lst) <= 1):[], _:fn} => (lst),
sort = {lst:[], compare:fn} => (merge(compare,sort(get(halve(lst),0),compare), sort(get(halve(lst),1),compare))),
compare = {n1:#,(n1 < n2):#} => -1,
compare = {n1:#,(n1 > n2):#} => 1,
compare = {_:#,_:#} => 0,
sort = {nums:[#]} => (sort(nums, compare)),
reverse = {lst:[]} => (lst -> (get(lst, len(lst) - # - 1))),
sum = {str:string} => (str \> (0, ($ + ord(@)))),
hash = {str:string, mod:#} => (sum(str) % mod),
abs = {(a < 0):#} => (a * -1)
abs = {a:#} => (a)