-mark expression as not to be evaluated
-functions called during instantiation? because of stupid expression evaluation
-double parens required for nested function calls like: f = {n:number} => ((f(n-1)) + (f(n-2)))
-need to handle unknown functions in expressions as well
-memoization
-functions can contain multiple lines
-register infix in table at runtime?
-it's really annoying when expressions remain unevaluated, they should pretty much always be evaluated if possible
-just mark expression expressions with some little token
-provide a way to invoke a file with args in its own scope
- [1, 2 + 5] -> No variable named +(2,5), easy fix, evaluate functions in literal parser if they are being evaluated and match function pattern
- if missing evaluates all variables, it will evaluate chained expressions that reuse the same variable name eagerly
- if it doesn't, it can't evaluate expressions that use outer scope variables
- in error message, write out least specific test that satisfactory match checks for
- just auto evaluate everything unless it is explicitly tagged as tbd
- type object instead of global
- morphisms could take [char] to [#]
- tests to ensure changes didn't break functionality
- truthy
- most specific shared type for arrays
- maybe conditions in patterns can have failure messages?
- recursively find morphisms instead of at top level
- make morphisms take a from and to type so that functions that handle multiple different types can work, to stringify
- get list subtypes by name like list[character] or tuple(#,#)
- when signature defined with unknown types, we need to handle calling that function so that that type is assigned on call
- a  = 3 //reads as =(_,a=3) since assignment regex doesn't accept spaces
- use real AST...