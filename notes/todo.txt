-add functions to function scope/call functions from var table?
-support return keyword in signature
-mark expression as not to be evaluated
-track custom type names alongside basename for extra points
-functions called during instantiation? because of stupid expression evaluation
-double parens required for nested function calls like: f = {n:number} => ((f(n-1)) + (f(n-2)))
-need to handle unknown functions in expressions as well
-memoization
-only enter scope once when evaluating conditions so previous assignments are persisted
-remove regex limit on var names
-functions can contain multiple lines
-register infix in table at runtime?
-do higher order funcs with for loop so we can see intermediate constructed list
-truly just implement strings as a list of characters
-catch errors as 0 in condition checking
-it's really annoying when expressions remain unevaluated, they should pretty much always be evaluated if possible
-just mark expression expressions with some little token