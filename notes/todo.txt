-mark expression as not to be evaluated
-functions called during instantiation? because of stupid expression evaluation
-need to handle unknown functions in expressions as well
-memoization
-functions can contain multiple lines
-register infix in table at runtime?
-just mark expression expressions with some little token
-provide a way to invoke a file with args in its own scope
- in error message, write out least specific test that satisfactory match checks for
- type object instead of global
- morphisms could take [char] to [#]
- tests to ensure changes didn't break functionality
- truthy
- most specific shared type for arrays
- maybe conditions in patterns can have failure messages?
- get list subtypes by name like list[character] or tuple(#,#)
- when signature defined with unknown types, we need to handle calling that function so that that type is assigned on call

Sooo...when evaling an expression in a 0..x -> (...) block, higher scoped @/# values are used and result in a map of list -> expr going to list -> value
This is technically correct but honestly vars in outside scopes probably shouldn't be accessible, top or current could be only scopes
This is tough because within one function we can shift down multiple scopes into other function calls, so that doesn't work
When is this behavior good and when is it bad?  The problem also is that we pass around var names rather than values
When the value is supplied as a function param it makes sense to keep it in scope longer
f = {y} => (show(time(y))) makes sense because it is passed down and internal functions with a param called y just override it

A lot of this is that we pass variables instead of evaling them at pass time

New var handling is breaking complex expression passing functions, like slice, that's the easiest one
Looks like pass by value breaks down when a function arg is passed, naturally
Also, since maps use their own assignment system, we probably need to copy what we already do in the operation runner

Also, since we don't split explicitly on assignment, assigning to higher order functions breaks stuff

User defined maps can't use default field names, confusing, ie. optional -> (@ * 2) would be nice but you need a full function
Auto operations on tuples seems cool, but really causes a lot of problems
Type expansion making objects way too big and redundant, store on either value or type

Hmmm...auto defined types are being treated as lists?